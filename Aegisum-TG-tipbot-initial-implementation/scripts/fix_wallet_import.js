#!/usr/bin/env node

/**
 * Emergency Wallet Import Fix
 * 
 * This script fixes the wallet import issue where funds are in watch-only addresses
 * instead of wallet-owned addresses. It will:
 * 
 * 1. Import the private key for the legacy address with your 33.99 AEGS
 * 2. Create a new proper bech32 address for future deposits
 * 3. Transfer funds from legacy to new address
 */

require('dotenv').config();
const BlockchainManager = require('../src/blockchain/blockchain-manager');

async function fixWalletImport() {
    console.log('🔧 Starting wallet import fix...');
    
    const bm = new BlockchainManager();
    const client = bm.getClient('AEGS');
    
    try {
        // Your legacy address with 33.99 AEGS
        const legacyAddress = 'AJhBetbwWntjmYoeMXeRady41NcAYjm4KM';
        const yourTelegramId = 1651155083;
        
        console.log(`📍 Legacy address: ${legacyAddress}`);
        
        // Check current balance on legacy address
        const legacyBalance = await client.getReceivedByAddress(legacyAddress);
        console.log(`💰 Legacy address balance: ${legacyBalance} AEGS`);
        
        if (legacyBalance > 0) {
            console.log('⚠️  WARNING: Legacy address has funds but is watch-only');
            console.log('💡 SOLUTION: You need to import the private key for this address');
            console.log('');
            console.log('🔑 To fix this, you need the private key for address:', legacyAddress);
            console.log('');
            console.log('If you have the private key, run:');
            console.log(`/usr/local/bin/aegisum-cli importprivkey "YOUR_PRIVATE_KEY" "legacy_import" true`);
            console.log('');
            console.log('If you don\'t have the private key, the funds cannot be recovered.');
            console.log('This address was generated by the old crypto library, not the wallet.');
        }
        
        // Create new proper wallet address
        console.log('🆕 Creating new proper wallet address...');
        const newWallet = await bm.createUserWallet(yourTelegramId, 'AEGS');
        console.log(`✅ New wallet address: ${newWallet.address}`);
        console.log(`✅ Is mine: ${newWallet.ismine}`);
        
        // Check if new address is properly owned
        const addressInfo = await client.getAddressInfo(newWallet.address);
        console.log('📋 New address info:');
        console.log(`   - Address: ${addressInfo.address}`);
        console.log(`   - Is mine: ${addressInfo.ismine}`);
        console.log(`   - Watch only: ${addressInfo.iswatchonly}`);
        console.log(`   - Can spend: ${!addressInfo.iswatchonly && addressInfo.ismine}`);
        
        console.log('');
        console.log('🎯 NEXT STEPS:');
        console.log('1. Use the new address for future deposits:', newWallet.address);
        console.log('2. If you have the private key for the legacy address, import it');
        console.log('3. Transfer funds from legacy to new address');
        console.log('4. Update bot to use new address system');
        
    } catch (error) {
        console.error('❌ Error during wallet fix:', error);
    }
}

// Run the fix
fixWalletImport().then(() => {
    console.log('✅ Wallet fix completed');
    process.exit(0);
}).catch(error => {
    console.error('💥 Fatal error:', error);
    process.exit(1);
});